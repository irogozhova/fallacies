{"version":3,"sources":["components/dice.svg","components/Card/CardSide/CardSide.styled.ts","components/Card/CardSide/CardSide.tsx","components/Card/Card.styled.ts","components/Card/Card.tsx","components/Modal/Modal.styled.ts","components/Modal/Modal.tsx","components/App.styled.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Root","styled","div","index","getBgColor","Name","Description","Example","Icon","img","Button","button","Index","CardSide","icon","content","onFlipBtnClick","name","src","alt","description","example","onClick","memo","engContent","ruContent","useState","isFlipped","setIsFlipped","handleClick","useCallback","e","preventDefault","flipDirection","Overlay","Modal","children","Cards","PlaceHolder","GenerateBtn","disabled","Numbers","App","cardIndexes","setCardIndexes","selectedCardIndex","setSelectedCardIndex","arr","length","r","Math","floor","random","indexOf","push","sort","a","b","generateCardNumbers","handleMouseOver","item","handleMouseOut","cards","map","card","i","key","engCard","ruCard","dice","onMouseOver","onMouseOut","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.964be5f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dice.f3ebe346.svg\";","import styled from \"styled-components\";\n\nconst getBgColor = (index: number) => {\n  if (index === 0) {\n    return \"#000\";\n  } else if (index > 0 && index <= 7) {\n    return \"#4d6fac\";\n  } else if (index > 7 && index <= 16) {\n    return \"#ff4c4c\";\n  } else if (index > 16 && index <= 22) {\n    return \"brown\";\n  } else if (index > 22 && index <= 28) {\n    return \"#d43589\";\n  } else if (index > 28 && index <= 36) {\n    return \"purple\";\n  } else {\n    return \"green\";\n  }\n};\n\nexport const Root = styled.div<{index: any}>`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 225px;\n  height: 335px;\n  padding: 10px;\n  font-family: 'Noto Sans', sans-serif;\n  font-size: 12px;\n  color: white;\n  background-color: ${({ index }) => getBgColor(index)};\n`;\n\nexport const Name = styled.div`\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n`;\n\nexport const Description = styled.div`\n  margin-bottom: 12px;\n`;\n\nexport const Example = styled.div`\n  font-style: italic;\n`;\n\nexport const Icon = styled.img`\n  display: block;\n  margin: 0 auto 12px;\n  width: 65px;\n  height: auto;\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  bottom: 7px;\n  left: 10px;\n`;\n\nexport const Index = styled.div`\n  position: absolute;\n  right: 10px;\n  bottom: 7px;\n  font-family: cursive;\n  font-size: 17px;\n`;","import React from \"react\";\n\nimport * as Styled from \"./CardSide.styled\";\n\nconst iconPath = 'https://raw.githubusercontent.com/Alexander230/fallacymania/master/src/';\n\ntype Props = {\n  index?: number,\n  icon?: string,\n  content: any,\n  onFlipBtnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void,\n};\n\nconst CardSide = ({\n  index,\n  icon,\n  content,\n  onFlipBtnClick,\n}: Props) => {\n  return (\n    <Styled.Root index={index}>\n      <Styled.Name>{content.name}</Styled.Name>\n      {icon &&\n        <Styled.Icon src={`${iconPath}${icon}`} alt={icon} />\n      }\n      <Styled.Description>{content.description}</Styled.Description>\n      <Styled.Example>{content.example}</Styled.Example>\n      {onFlipBtnClick &&\n        <Styled.Button onClick={onFlipBtnClick}>Click to flip</Styled.Button>\n      }\n      <Styled.Index>{index}</Styled.Index>\n    </Styled.Root>\n  )\n}\n\nexport default CardSide;","import styled from \"styled-components\";\n\nexport const Root = styled.div`\n  margin-bottom: 20px;\n`;\n\n","import React, { useState, useCallback, memo } from \"react\";\nimport ReactCardFlip from 'react-card-flip';\n\nimport CardSide from './CardSide';\n\nimport * as Styled from \"./Card.styled\";\n\ntype Props = {\n  index: number,\n  icon: string,\n  engContent: object;\n  ruContent: object,\n};\n\nconst Card = ({\n  index,\n  icon,\n  engContent,\n  ruContent,\n}: Props) => {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = useCallback((e) => {\n    e.preventDefault();\n    setIsFlipped(!isFlipped)\n  }, [isFlipped]);\n\n  return (\n    <Styled.Root>\n      <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\n        <CardSide\n          index={index}\n          icon={icon}\n          content={engContent}\n          onFlipBtnClick={handleClick}\n        />\n        <CardSide\n          index={index}\n          icon={icon}\n          content={ruContent}\n          onFlipBtnClick={handleClick}\n        />\n      </ReactCardFlip>\n    </Styled.Root>\n  );\n}\n\nexport default memo(Card);","import styled from \"styled-components\";\n\nexport const Overlay = styled.div`\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  padding: 1rem;\n  background-color: rgba(0, 0, 0, 0.7);\n  z-index: 999;\n  opacity: 1;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;\n\nexport const Modal = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: auto;\n  padding: 30px;\n  background-color: #fff;\n\n  & > div:first-child {\n    margin-right: 20px;\n  }\n`;\n","import React from \"react\";\n\nimport * as Styled from \"./Modal.styled\";\n\ntype Props = {\n  children?: any,\n};\n\nconst Modal = ({ children }: Props) => {\n  return (\n    <Styled.Overlay>\n      <Styled.Modal>\n        {children}\n      </Styled.Modal>\n    </Styled.Overlay>\n  )\n}\n\nexport default Modal;","import styled from \"styled-components\";\n\nexport const Root = styled.div`\n  position: relative;\n  padding-top: 20px;\n`;\n\nexport const Cards = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nexport const PlaceHolder = styled.div`\n  width: 245px;\n  height: 0;\n`;\n\nexport const GenerateBtn = styled.button<{disabled: boolean}>`\n  position: fixed;\n  bottom: 3vh;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 260px;\n  height: 45px;\n  border-radius: 25px;\n  background-color: black;\n  font-family: 'Noto Sans', sans-serif;\n  font-size: 13px;\n  color: #fff;\n  border: none;\n  outline: none;\n  z-index: 1000;\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Numbers = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & > div {\n    display: flex;\n    justify-content: center;\n    width: 30px;\n    cursor: pointer;\n\n    &:first-child {\n      margin-left: 10px;\n    }\n  }\n\n  span {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background-color: white;\n    color: #000;\n  }\n`;","import React, { useState, useCallback } from \"react\";\nimport Card from './Card';\nimport CardSide from './Card/CardSide';\nimport Modal from './Modal';\nimport dice from './dice.svg';\n\nimport * as Styled from \"./App.styled\";\n\nimport cards from './cards.json';\n\nconst generateCardNumbers = () => {\n  const arr = [];\n  while(arr.length < 5){\n    let r = Math.floor(Math.random() * 44);\n    if (arr.indexOf(r) === -1) {\n      arr.push(r);\n    }\n  }\n\n  return arr.sort((a, b) => a - b);\n}\n\nconst App = () => {\n  const [cardIndexes, setCardIndexes] = useState<number[] | null>(null);\n  const [selectedCardIndex, setSelectedCardIndex] = useState<number | null>(null);\n\n  const handleClick = useCallback((e) => {\n    e.preventDefault();\n    setCardIndexes(generateCardNumbers());\n  },[]);\n\n  const handleMouseOver = useCallback((item) => {\n    setSelectedCardIndex(item);\n  },[]);\n\n  const handleMouseOut = useCallback(() => {\n    setSelectedCardIndex(null);\n  },[]);\n\n  return (\n    <Styled.Root>\n      <Styled.Cards>\n        {cards.map((card: any, i: number) => (\n          <Card\n            key={i}\n            index={i}\n            icon={card.icon}\n            engContent={card.engCard}\n            ruContent={card.ruCard}\n          />\n        ))}\n        {/* placeholders for last flex row */}\n        <Styled.PlaceHolder />\n        <Styled.PlaceHolder />\n        <Styled.PlaceHolder />\n        <Styled.PlaceHolder />\n        <Styled.PlaceHolder />\n      </Styled.Cards>\n      <Styled.GenerateBtn\n        onClick={handleClick}\n        disabled={cardIndexes !== null}\n      >\n        {cardIndexes === null ? (\n          <>\n            Get 5 random cards\n            <img src={dice} alt=\"dice\" />\n          </>\n          ) : (\n            <Styled.Numbers>\n              Your cards:\n              {cardIndexes.map((item, i) => (\n                <div\n                  key={i}\n                  onMouseOver={() => handleMouseOver(item)}\n                  onMouseOut={handleMouseOut}\n                >\n                  <span>{item}</span>\n                </div>\n              ))}\n            </Styled.Numbers>\n          )\n        }\n      </Styled.GenerateBtn>\n      {selectedCardIndex !== null &&\n        <Modal>\n          <CardSide\n            index={selectedCardIndex}\n            icon={cards[selectedCardIndex].icon}\n            content={cards[selectedCardIndex].engCard}\n          />\n          <CardSide\n            index={selectedCardIndex}\n            icon={cards[selectedCardIndex].icon}\n            content={cards[selectedCardIndex].ruCard}\n          />\n        </Modal>\n      }\n    </Styled.Root>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}